name: Continuous Deployment (Prod) (Backend)
on:
  push:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - 'packages/database/**'
      - 'packages/api-client/**'
      - 'docker/Dockerfile.backend'
      - '.github/workflows/deploy_backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - dev

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Set environment variables
      - name: Set environment variables
        run: |
          # Determine environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          fi
          
          # Set image tags based on environment
          ENV="${{ env.ENVIRONMENT }}"
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          echo "IMAGE_TAG=yashmakhija/kanal-kamara-backend:${ENV}-${SHA_SHORT}" >> $GITHUB_ENV
          echo "IMAGE_LATEST=yashmakhija/kanal-kamara-backend:${ENV}" >> $GITHUB_ENV
          
          # Add latest tag for production
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            echo "IMAGE_LATEST_ALSO=yashmakhija/kanal-kamara-backend:latest" >> $GITHUB_ENV
          fi
          
          # Load environment-specific variables from GitHub secrets
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "API_URL=${{ secrets.API_URL }}" >> $GITHUB_ENV
          echo "NODE_ENV=${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          
          # DATABASE_URL - use secret or construct it
          if [[ -n "${{ secrets.DATABASE_URL }}" ]]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          else
            echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          fi
      
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_LATEST }}
            ${{ env.IMAGE_LATEST_ALSO }}
          cache-from: type=registry,ref=${{ env.IMAGE_LATEST }}
          cache-to: type=inline
          build-args: |
            DATABASE_URL=${{ env.DATABASE_URL }}
            POSTGRES_USER=${{ env.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ env.POSTGRES_DB }}
            NODE_ENV=${{ env.NODE_ENV }}
            JWT_SECRET=${{ env.JWT_SECRET }}
            API_URL=${{ env.API_URL }}
      
   