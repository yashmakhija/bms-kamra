name: Build and Push Docker Images (Environment-based)

on:
  push:
    branches:
      - main
      - staging
      - dev
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    # Determine environment based on branch or workflow_dispatch input
    steps:
      - name: Set environment
        id: set-environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV_NAME=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENV_NAME=staging" >> $GITHUB_ENV
          else
            echo "ENV_NAME=dev" >> $GITHUB_ENV
          fi
          
          # For PR events, set to the target branch name
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TARGET_BRANCH="${{ github.base_ref }}"
            if [[ "$TARGET_BRANCH" == "main" ]]; then
              echo "ENV_NAME=production" >> $GITHUB_ENV
            elif [[ "$TARGET_BRANCH" == "staging" ]]; then
              echo "ENV_NAME=staging" >> $GITHUB_ENV
            else
              echo "ENV_NAME=dev" >> $GITHUB_ENV
            fi
          fi
          
          echo "Environment set to: ${{ env.ENV_NAME }}"
          echo "environment=${{ env.ENV_NAME }}" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set environment variables
      - name: Set environment variables
        id: set-env-vars
        run: |
          ENV_TAG="${{ env.ENV_NAME }}"
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Don't push images for PRs, only build them
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PUSH_IMAGES=false" >> $GITHUB_ENV
            echo "Only building images for PR, not pushing"
          else
            echo "PUSH_IMAGES=true" >> $GITHUB_ENV
          fi
          
          # Set tags for each service
          echo "BACKEND_TAGS=ghcr.io/${{ github.repository }}/backend:${ENV_TAG},ghcr.io/${{ github.repository }}/backend:${ENV_TAG}-${SHA_SHORT}" >> $GITHUB_ENV
          echo "FRONTEND_TAGS=ghcr.io/${{ github.repository }}/frontend:${ENV_TAG},ghcr.io/${{ github.repository }}/frontend:${ENV_TAG}-${SHA_SHORT}" >> $GITHUB_ENV
          echo "ADMIN_TAGS=ghcr.io/${{ github.repository }}/admin:${ENV_TAG},ghcr.io/${{ github.repository }}/admin:${ENV_TAG}-${SHA_SHORT}" >> $GITHUB_ENV
          
          # Load environment-specific variables from GitHub secrets
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "API_URL=${{ secrets.API_URL }}" >> $GITHUB_ENV
          echo "NODE_ENV=${{ env.ENV_NAME }}" >> $GITHUB_ENV
          
          # Also set latest tag for production
          if [[ "${{ env.ENV_NAME }}" == "production" ]]; then
            echo "BACKEND_TAGS=${BACKEND_TAGS},ghcr.io/${{ github.repository }}/backend:latest" >> $GITHUB_ENV
            echo "FRONTEND_TAGS=${FRONTEND_TAGS},ghcr.io/${{ github.repository }}/frontend:latest" >> $GITHUB_ENV
            echo "ADMIN_TAGS=${ADMIN_TAGS},ghcr.io/${{ github.repository }}/admin:latest" >> $GITHUB_ENV
          fi

      # Build and push Backend image using docker-compose
      - name: Build Backend using docker-compose
        run: |
          # Create .env file for docker-compose
          cat > .env << EOF
          POSTGRES_USER=${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ env.POSTGRES_DB }}
          NODE_ENV=${{ env.NODE_ENV }}
          JWT_SECRET=${{ env.JWT_SECRET }}
          API_URL=${{ env.API_URL }}
          API_PORT=8080
          EOF
          
          # Build backend using docker-compose
          docker-compose build backend
      
      - name: Tag and push Backend image
        if: env.PUSH_IMAGES == 'true'
        run: |
          # The image name from docker-compose
          BACKEND_IMAGE=$(docker-compose images -q backend)
          
          # Tag with all our required tags
          IFS=',' read -ra BACKEND_TAG_ARRAY <<< "${{ env.BACKEND_TAGS }}"
          for tag in "${BACKEND_TAG_ARRAY[@]}"; do
            docker tag $BACKEND_IMAGE $tag
            docker push $tag
          done

      # Build and push Frontend image
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: ${{ env.PUSH_IMAGES == 'true' }}
          tags: ${{ env.FRONTEND_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            API_URL=${{ env.API_URL }}

      # Build and push Admin image
      - name: Build and push Admin image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.admin
          push: ${{ env.PUSH_IMAGES == 'true' }}
          tags: ${{ env.ADMIN_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            API_URL=${{ env.API_URL }} 