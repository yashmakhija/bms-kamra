FROM node:20-alpine

WORKDIR /app

RUN apk add --no-cache python3 make g++ git openssl openssl-dev

ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV ROLLUP_SKIP_NODE_RESOLUTION=true

# Add build arguments with defaults
ARG DATABASE_URL="postgresql://kunalkamara:thisiskunalkamra@postgres:5432/kanal-ticket"
ENV DATABASE_URL=${DATABASE_URL}

RUN npm install -g pnpm

COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/api/package.json ./apps/api/
COPY packages/database/package.json ./packages/database/
COPY packages/api-client/package.json ./packages/api-client/
COPY packages/typescript-config/package.json ./packages/typescript-config/

RUN pnpm install --frozen-lockfile --ignore-scripts

COPY . .

# First generate Prisma client before building dependencies
RUN cd packages/database && echo "DATABASE_URL=${DATABASE_URL}" > .env && pnpm db:generate

# Now build packages in the correct order
RUN pnpm --filter @repo/api-client run build || echo "Continuing despite api-client build issues"
RUN pnpm --filter @repo/database run build
RUN pnpm --filter api run build

# Set up database connection for schema push - only if DATABASE_URL is set
RUN cd packages/database && \
    if [ -n "${DATABASE_URL}" ]; then \
      pnpm db:push || echo "Skipping DB push - will run migrations at app start"; \
    else \
      echo "DATABASE_URL not set, skipping db:push"; \
    fi

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=3s \
  CMD wget --quiet --tries=1 --spider http://localhost:8080/health || exit 1

EXPOSE 8080

# Start the application with environment variables
CMD ["sh", "-c", "echo \"DATABASE_URL=${DATABASE_URL}\" > .env && pnpm --filter @repo/database exec prisma migrate deploy && pnpm --filter api start"]