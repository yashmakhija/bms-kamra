generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  phone         String?      @unique
  phoneVerified Boolean      @default(false)
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isAdmin       Boolean      @default(false)
  accounts      Account[]
  admin         Admin?
  bookings      Booking[]
  otpCodes      OtpCode[]
  sessions      Session[]
  ticketLocks   TicketLock[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model OtpCode {
  id        String   @id @default(cuid())
  code      String
  phone     String
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model Admin {
  id        String    @id @default(cuid())
  userId    String    @unique
  role      AdminRole @default(EDITOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  country     String
  capacity    Int
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shows       Show[]

  @@map("venues")
}

model Show {
  id           String      @id @default(cuid())
  title        String
  subtitle     String?
  description  String?
  imageUrl     String?
  thumbnailUrl String?
  duration     Int
  ageLimit     String?
  language     String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  venueId      String
  events       Event[]
  priceTiers   PriceTier[]
  venue        Venue       @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("shows")
}

model Category {
  id          String       @id @default(cuid())
  name        String
  type        CategoryType
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  priceTiers  PriceTier[]

  @@map("categories")
}

model PriceTier {
  id           String        @id @default(cuid())
  capacity     Int
  price        Decimal       @db.Decimal(10, 2)
  currency     String        @default("INR")
  description  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  showId       String
  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id])
  show         Show          @relation(fields: [showId], references: [id], onDelete: Cascade)
  seatSections SeatSection[]

  @@unique([showId, categoryId])
  @@map("price_tiers")
}

model Event {
  id        String     @id @default(cuid())
  date      DateTime
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  showId    String
  show      Show       @relation(fields: [showId], references: [id], onDelete: Cascade)
  showtimes Showtime[]

  @@map("events")
}

model Showtime {
  id           String        @id @default(cuid())
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  eventId      String
  seatSections SeatSection[]
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("showtimes")
}

model SeatSection {
  id             String    @id @default(cuid())
  name           String
  availableSeats Int
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  showtimeId     String
  priceTierId    String
  priceTier      PriceTier @relation(fields: [priceTierId], references: [id])
  showtime       Showtime  @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  tickets        Ticket[]

  @@map("seat_sections")
}

model Ticket {
  id         String       @id @default(cuid())
  seatNumber String?
  code       String       @unique
  status     TicketStatus @default(AVAILABLE)
  price      Decimal      @db.Decimal(10, 2)
  currency   String       @default("USD")
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  sectionId  String
  ticketLock TicketLock?
  section    SeatSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  bookings   Booking[]    @relation("BookingToTicket")

  @@index([status])
  @@map("tickets")
}

model TicketLock {
  id        String   @id @default(cuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String   @unique
  userId    String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@map("ticket_locks")
}

model Booking {
  id            String         @id @default(cuid())
  status        BookingStatus  @default(PENDING)
  totalAmount   Decimal        @db.Decimal(10, 2)
  currency      String         @default("USD")
  paymentMethod PaymentMethod?
  paymentId     String?
  paymentDate   DateTime?
  refundId      String?        // Store external refund reference ID
  refundDate    DateTime?      // When refund was processed
  refundReason  String?        // Reason for refund
  refundedBy    String?        // Admin/user who initiated refund
  expiresAt     DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  metadata      Json?          @default("{}")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets       Ticket[]       @relation("BookingToTicket")

  @@index([status, expiresAt])
  @@map("bookings")
}

enum AdminRole {
  SUPER_ADMIN
  EDITOR
}

enum CategoryType {
  VIP
  PREMIUM
  REGULAR
  ECONOMY
}

enum TicketStatus {
  AVAILABLE
  LOCKED
  RESERVED
  SOLD
  CANCELED
}

enum BookingStatus {
  PENDING
  PAID
  EXPIRED
  CANCELED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  PAYPAL
  BANK_TRANSFER
  WALLET
  RAZORPAY
}
